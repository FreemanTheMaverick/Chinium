/*
Generated by EigenEinSum

Recommended filename:
Ws_g...E1Sigmas_g...Rho1s_g,r...AO1sa_g,mu,t...AO1s_g,nu,r---Fa1_mu,nu,t.hpp

Einsum expression:
Ws(g), E1Sigmas(g), Rho1s(g, r), AO1sa(g, mu, t), AO1s(g, nu, r) -> Fa1(mu, nu, t)

The einsum expression is decomposed into:
Ws(g), E1Sigmas(g) -> WsE1Sigmas(g)
WsE1Sigmas(g), Rho1s(g, r) -> WsE1SigmasRho1s(g, r)
WsE1SigmasRho1s(g, r), AO1sa(g, mu, t) -> WsE1SigmasRho1sAO1sa(g, r, mu, t)
WsE1SigmasRho1sAO1sa(g, r, mu, t), AO1s(g, nu, r) -> Fa1(mu, nu, t)

The index paths are derived to be:
TOP
├── g
├── r
│   └── g
└── t
    └── mu
        └── r
            ├── g
            └── nu
                └── g
*/
{
	const int mu_len = AO1sa.dimensions()[1];
	assert( mu_len == Fa1.dimensions()[0] );
	const int nu_len = AO1s.dimensions()[1];
	assert( nu_len == Fa1.dimensions()[1] );
	const int t_len = AO1sa.dimensions()[2];
	assert( t_len == Fa1.dimensions()[2] );
	const int g_len = Ws.dimensions()[0];
	assert( g_len == E1Sigmas.dimensions()[0] );
	assert( g_len == Rho1s.dimensions()[0] );
	assert( g_len == AO1sa.dimensions()[0] );
	assert( g_len == AO1s.dimensions()[0] );
	const int r_len = Rho1s.dimensions()[1];
	assert( r_len == AO1s.dimensions()[2] );
	Eigen::Tensor<double, 1> WsE1Sigmas(g_len);
	Eigen::Tensor<double, 2> WsE1SigmasRho1s(g_len, r_len);
	WsE1Sigmas.setZero();
	WsE1SigmasRho1s.setZero();
	Eigen::Tensor<double, 1> WsE1SigmasRho1sAO1satmur(g_len);
	for ( int g = 0; g < g_len; g++ ){
		WsE1Sigmas(g) += Ws(g) * E1Sigmas(g);
	}
	for ( int r = 0; r < r_len; r++ ){
		for ( int g = 0; g < g_len; g++ ){
			WsE1SigmasRho1s(g, r) += WsE1Sigmas(g) * Rho1s(g, r);
		}
	}
	for ( int t = 0; t < t_len; t++ ){
		for ( int mu = 0; mu < mu_len; mu++ ){
			for ( int r = 0; r < r_len; r++ ){
				WsE1SigmasRho1sAO1satmur.setZero();
				for ( int g = 0; g < g_len; g++ ){
					WsE1SigmasRho1sAO1satmur(g) += WsE1SigmasRho1s(g, r) * AO1sa(g, mu, t);
				}
				for ( int nu = 0; nu < nu_len; nu++ ){
					for ( int g = 0; g < g_len; g++ ){
						Fa1(mu, nu, t) += WsE1SigmasRho1sAO1satmur(g) * AO1s(g, nu, r);
					}
				}
			}
		}
	}
}
