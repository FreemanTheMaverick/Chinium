/*
Generated by EigenEinSum

Recommended filename:
Ws_g...E2Rho2s_g...RhoGrads_g,t,a...AOs_g,mu...AOs_g,nu---F0_mu,nu,t,a.hpp

Einsum expression:
Ws(g), E2Rho2s(g), RhoGrads(g, t, a), AOs(g, mu), AOs(g, nu) -> F0(mu, nu, t, a)

The einsum expression is decomposed into:
Ws(g), E2Rho2s(g) -> WsE2Rho2s(g)
WsE2Rho2s(g), RhoGrads(g, t, a) -> WsE2Rho2sRhoGrads(g, t, a)
WsE2Rho2sRhoGrads(g, t, a), AOs(g, mu) -> WsE2Rho2sRhoGradsAOs(g, mu, t, a)
WsE2Rho2sRhoGradsAOs(g, mu, t, a), AOs(g, nu) -> F0(mu, nu, t, a)

The index paths are derived to be:
TOP
├── g
└── a
    └── t
        ├── g
        └── mu
            ├── g
            └── nu
                └── g
*/
{
	const int mu_len = AOs.dimensions()[1];
	assert( mu_len == F0.dimensions()[0] );
	const int nu_len = AOs.dimensions()[1];
	assert( nu_len == F0.dimensions()[1] );
	const int t_len = RhoGrads.dimensions()[1];
	assert( t_len == F0.dimensions()[2] );
	const int a_len = RhoGrads.dimensions()[2];
	assert( a_len == F0.dimensions()[3] );
	const int g_len = Ws.dimensions()[0];
	assert( g_len == E2Rho2s.dimensions()[0] );
	assert( g_len == RhoGrads.dimensions()[0] );
	assert( g_len == AOs.dimensions()[0] );
	assert( g_len == AOs.dimensions()[0] );
	Eigen::Tensor<double, 1> WsE2Rho2s(g_len);
	WsE2Rho2s.setZero();
	Eigen::Tensor<double, 1> WsE2Rho2sRhoGradsat(g_len);
	Eigen::Tensor<double, 1> WsE2Rho2sRhoGradsAOsatmu(g_len);
	for ( int g = 0; g < g_len; g++ ){
		WsE2Rho2s(g) += Ws(g) * E2Rho2s(g);
	}
	for ( int a = 0; a < a_len; a++ ){
		for ( int t = 0; t < t_len; t++ ){
			WsE2Rho2sRhoGradsat.setZero();
			for ( int g = 0; g < g_len; g++ ){
				WsE2Rho2sRhoGradsat(g) += WsE2Rho2s(g) * RhoGrads(g, t, a);
			}
			for ( int mu = 0; mu < mu_len; mu++ ){
				WsE2Rho2sRhoGradsAOsatmu.setZero();
				for ( int g = 0; g < g_len; g++ ){
					WsE2Rho2sRhoGradsAOsatmu(g) += WsE2Rho2sRhoGradsat(g) * AOs(g, mu);
				}
				for ( int nu = 0; nu < nu_len; nu++ ){
					for ( int g = 0; g < g_len; g++ ){
						F0(mu, nu, t, a) += WsE2Rho2sRhoGradsAOsatmu(g) * AOs(g, nu);
					}
				}
			}
		}
	}
}
