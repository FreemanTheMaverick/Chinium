/*
Generated by EigenEinSum

Recommended filename:
Ws_g...V_g...AO1s_g,mu,r...AO1s_g,nu,r---F2_mu,nu.hpp

Einsum expression:
Ws(g), V(g), AO1s(g, mu, r), AO1s(g, nu, r) -> F2(mu, nu)

The einsum expression is decomposed into:
Ws(g), V(g) -> WsV(g)
WsV(g), AO1s(g, mu, r) -> WsVAO1s(g, r, mu)
WsVAO1s(g, r, mu), AO1s(g, nu, r) -> F2(mu, nu)

The index paths are derived to be:
TOP
├── g
└── mu
    └── r
        ├── g
        └── nu
            └── g
*/
{
	[[maybe_unused]] const int mu_len = AO1s.dimension(1);
	assert( mu_len == F2.dimension(0) );
	[[maybe_unused]] const int nu_len = AO1s.dimension(1);
	assert( nu_len == F2.dimension(1) );
	[[maybe_unused]] const int g_len = Ws.dimension(0);
	assert( g_len == V.dimension(0) );
	assert( g_len == AO1s.dimension(0) );
	assert( g_len == AO1s.dimension(0) );
	[[maybe_unused]] const int r_len = AO1s.dimension(2);
	assert( r_len == AO1s.dimension(2) );
	Eigen::Tensor<double, 1> WsV(g_len);
	WsV.setZero();
	Eigen::Tensor<double, 1> WsVAO1smur(g_len);
	for ( int g = 0; g < g_len; g++ ){
		WsV(g) += Ws(g) * V(g);
	}
	for ( int mu = 0; mu < mu_len; mu++ ){
		for ( int r = 0; r < r_len; r++ ){
			WsVAO1smur.setZero();
			for ( int g = 0; g < g_len; g++ ){
				WsVAO1smur(g) += WsV(g) * AO1s(g, mu, r);
			}
			for ( int nu = 0; nu < nu_len; nu++ ){
				for ( int g = 0; g < g_len; g++ ){
					F2(mu, nu) += WsVAO1smur(g) * AO1s(g, nu, r);
				}
			}
		}
	}
}
