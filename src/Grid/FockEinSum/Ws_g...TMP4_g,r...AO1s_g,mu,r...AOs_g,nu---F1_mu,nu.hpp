/*
Generated by EigenEinSum

Recommended filename:
Ws_g...TMP4_g,r...AO1s_g,mu,r...AOs_g,nu---F1_mu,nu.hpp

Einsum expression:
Ws(g), TMP4(g, r), AO1s(g, mu, r), AOs(g, nu) -> F1(mu, nu)

The einsum expression is decomposed into:
Ws(g), TMP4(g, r) -> WsTMP4(g, r)
WsTMP4(g, r), AO1s(g, mu, r) -> WsTMP4AO1s(g, mu)
WsTMP4AO1s(g, mu), AOs(g, nu) -> F1(mu, nu)

The index paths are derived to be:
TOP
├── r
│   └── g
└── mu
    ├── r
    │   └── g
    └── nu
        └── g
*/
{
	[[maybe_unused]] const int mu_len = AO1s.dimension(1);
	assert( mu_len == F1.dimension(0) );
	[[maybe_unused]] const int nu_len = AOs.dimension(1);
	assert( nu_len == F1.dimension(1) );
	[[maybe_unused]] const int g_len = Ws.dimension(0);
	assert( g_len == TMP4.dimension(0) );
	assert( g_len == AO1s.dimension(0) );
	assert( g_len == AOs.dimension(0) );
	[[maybe_unused]] const int r_len = TMP4.dimension(1);
	assert( r_len == AO1s.dimension(2) );
	Eigen::Tensor<double, 2> WsTMP4(g_len, r_len);
	Eigen::Tensor<double, 1> WsTMP4AO1smu(g_len);
	WsTMP4.setZero();
	for ( int r = 0; r < r_len; r++ ){
		for ( int g = 0; g < g_len; g++ ){
			WsTMP4(g, r) += Ws(g) * TMP4(g, r);
		}
	}
	for ( int mu = 0; mu < mu_len; mu++ ){
		WsTMP4AO1smu.setZero();
		for ( int r = 0; r < r_len; r++ ){
			for ( int g = 0; g < g_len; g++ ){
				WsTMP4AO1smu(g) += WsTMP4(g, r) * AO1s(g, mu, r);
			}
		}
		for ( int nu = 0; nu < nu_len; nu++ ){
			for ( int g = 0; g < g_len; g++ ){
				F1(mu, nu) += WsTMP4AO1smu(g) * AOs(g, nu);
			}
		}
	}
}
