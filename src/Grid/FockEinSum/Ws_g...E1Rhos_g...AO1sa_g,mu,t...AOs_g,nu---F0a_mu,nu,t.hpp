/*
Generated by EigenEinSum

Recommended filename:
Ws_g...E1Rhos_g...AO1sa_g,mu,t...AOs_g,nu---F0a_mu,nu,t.hpp

Einsum expression:
Ws(g), E1Rhos(g), AO1sa(g, mu, t), AOs(g, nu) -> F0a(mu, nu, t)

The einsum expression is decomposed into:
Ws(g), E1Rhos(g) -> WsE1Rhos(g)
WsE1Rhos(g), AO1sa(g, mu, t) -> WsE1RhosAO1sa(g, mu, t)
WsE1RhosAO1sa(g, mu, t), AOs(g, nu) -> F0a(mu, nu, t)

The index paths are derived to be:
TOP
├── g
└── t
    └── mu
        ├── g
        └── nu
            └── g
*/
{
	const int mu_len = AO1sa.dimensions()[1];
	assert( mu_len == F0a.dimensions()[0] );
	const int nu_len = AOs.dimensions()[1];
	assert( nu_len == F0a.dimensions()[1] );
	const int t_len = AO1sa.dimensions()[2];
	assert( t_len == F0a.dimensions()[2] );
	const int g_len = Ws.dimensions()[0];
	assert( g_len == E1Rhos.dimensions()[0] );
	assert( g_len == AO1sa.dimensions()[0] );
	assert( g_len == AOs.dimensions()[0] );
	Eigen::Tensor<double, 1> WsE1Rhos(g_len);
	WsE1Rhos.setZero();
	Eigen::Tensor<double, 1> WsE1RhosAO1satmu(g_len);
	for ( int g = 0; g < g_len; g++ ){
		WsE1Rhos(g) += Ws(g) * E1Rhos(g);
	}
	for ( int t = 0; t < t_len; t++ ){
		for ( int mu = 0; mu < mu_len; mu++ ){
			WsE1RhosAO1satmu.setZero();
			for ( int g = 0; g < g_len; g++ ){
				WsE1RhosAO1satmu(g) += WsE1Rhos(g) * AO1sa(g, mu, t);
			}
			for ( int nu = 0; nu < nu_len; nu++ ){
				for ( int g = 0; g < g_len; g++ ){
					F0a(mu, nu, t) += WsE1RhosAO1satmu(g) * AOs(g, nu);
				}
			}
		}
	}
}
