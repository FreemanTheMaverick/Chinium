/*
Generated by EigenEinSum

Recommended filename:
Ws_g...TMP4_g,r,t,a...AO1s_g,mu,r...AOs_g,nu---F1_mu,nu,t,a.hpp

Einsum expression:
Ws(g), TMP4(g, r, t, a), AO1s(g, mu, r), AOs(g, nu) -> F1(mu, nu, t, a)

The einsum expression is decomposed into:
Ws(g), TMP4(g, r, t, a) -> WsTMP4(g, r, t, a)
WsTMP4(g, r, t, a), AO1s(g, mu, r) -> WsTMP4AO1s(g, mu, t, a)
WsTMP4AO1s(g, mu, t, a), AOs(g, nu) -> F1(mu, nu, t, a)

The index paths are derived to be:
TOP
└── a
    └── t
        ├── r
        │   └── g
        └── mu
            ├── r
            │   └── g
            └── nu
                └── g
*/
{
	[[maybe_unused]] const int mu_len = AO1s.dimension(1);
	assert( mu_len == F1.dimension(0) );
	[[maybe_unused]] const int nu_len = AOs.dimension(1);
	assert( nu_len == F1.dimension(1) );
	[[maybe_unused]] const int t_len = TMP4.dimension(2);
	assert( t_len == F1.dimension(2) );
	[[maybe_unused]] const int a_len = TMP4.dimension(3);
	assert( a_len == F1.dimension(3) );
	[[maybe_unused]] const int g_len = Ws.dimension(0);
	assert( g_len == TMP4.dimension(0) );
	assert( g_len == AO1s.dimension(0) );
	assert( g_len == AOs.dimension(0) );
	[[maybe_unused]] const int r_len = TMP4.dimension(1);
	assert( r_len == AO1s.dimension(2) );
	Eigen::Tensor<double, 2> WsTMP4at(g_len, r_len);
	Eigen::Tensor<double, 1> WsTMP4AO1satmu(g_len);
	for ( int a = 0; a < a_len; a++ ){
		for ( int t = 0; t < t_len; t++ ){
			WsTMP4at.setZero();
			for ( int r = 0; r < r_len; r++ ){
				for ( int g = 0; g < g_len; g++ ){
					WsTMP4at(g, r) += Ws(g) * TMP4(g, r, t, a);
				}
			}
			for ( int mu = 0; mu < mu_len; mu++ ){
				WsTMP4AO1satmu.setZero();
				for ( int r = 0; r < r_len; r++ ){
					for ( int g = 0; g < g_len; g++ ){
						WsTMP4AO1satmu(g) += WsTMP4at(g, r) * AO1s(g, mu, r);
					}
				}
				for ( int nu = 0; nu < nu_len; nu++ ){
					for ( int g = 0; g < g_len; g++ ){
						F1(mu, nu, t, a) += WsTMP4AO1satmu(g) * AOs(g, nu);
					}
				}
			}
		}
	}
}
