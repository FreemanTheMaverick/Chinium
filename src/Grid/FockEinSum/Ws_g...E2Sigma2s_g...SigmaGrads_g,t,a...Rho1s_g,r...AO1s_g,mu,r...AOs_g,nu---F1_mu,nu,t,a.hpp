/*
Generated by EigenEinSum

Recommended filename:
Ws_g...E2Sigma2s_g...SigmaGrads_g,t,a...Rho1s_g,r...AO1s_g,mu,r...AOs_g,nu---F1_mu,nu,t,a.hpp

Einsum expression:
Ws(g), E2Sigma2s(g), SigmaGrads(g, t, a), Rho1s(g, r), AO1s(g, mu, r), AOs(g, nu) -> F1(mu, nu, t, a)

The einsum expression is decomposed into:
Ws(g), E2Sigma2s(g) -> WsE2Sigma2s(g)
WsE2Sigma2s(g), SigmaGrads(g, t, a) -> WsE2Sigma2sSigmaGrads(g, t, a)
WsE2Sigma2sSigmaGrads(g, t, a), Rho1s(g, r) -> WsE2Sigma2sSigmaGradsRho1s(g, r, t, a)
WsE2Sigma2sSigmaGradsRho1s(g, r, t, a), AO1s(g, mu, r) -> WsE2Sigma2sSigmaGradsRho1sAO1s(g, mu, t, a)
WsE2Sigma2sSigmaGradsRho1sAO1s(g, mu, t, a), AOs(g, nu) -> F1(mu, nu, t, a)

The index paths are derived to be:
TOP
├── g
└── a
    └── t
        ├── g
        ├── r
        │   └── g
        └── mu
            ├── r
            │   └── g
            └── nu
                └── g
*/
{
	const int mu_len = AO1s.dimension(1);
	assert( mu_len == F1.dimension(0) );
	const int nu_len = AOs.dimension(1);
	assert( nu_len == F1.dimension(1) );
	const int t_len = SigmaGrads.dimension(1);
	assert( t_len == F1.dimension(2) );
	const int a_len = SigmaGrads.dimension(2);
	assert( a_len == F1.dimension(3) );
	const int g_len = Ws.dimension(0);
	assert( g_len == E2Sigma2s.dimension(0) );
	assert( g_len == SigmaGrads.dimension(0) );
	assert( g_len == Rho1s.dimension(0) );
	assert( g_len == AO1s.dimension(0) );
	assert( g_len == AOs.dimension(0) );
	const int r_len = Rho1s.dimension(1);
	assert( r_len == AO1s.dimension(2) );
	Eigen::Tensor<double, 1> WsE2Sigma2s(g_len);
	WsE2Sigma2s.setZero();
	Eigen::Tensor<double, 1> WsE2Sigma2sSigmaGradsat(g_len);
	Eigen::Tensor<double, 2> WsE2Sigma2sSigmaGradsRho1sat(g_len, r_len);
	Eigen::Tensor<double, 1> WsE2Sigma2sSigmaGradsRho1sAO1satmu(g_len);
	for ( int g = 0; g < g_len; g++ ){
		WsE2Sigma2s(g) += Ws(g) * E2Sigma2s(g);
	}
	for ( int a = 0; a < a_len; a++ ){
		for ( int t = 0; t < t_len; t++ ){
			WsE2Sigma2sSigmaGradsat.setZero();
			WsE2Sigma2sSigmaGradsRho1sat.setZero();
			for ( int g = 0; g < g_len; g++ ){
				WsE2Sigma2sSigmaGradsat(g) += WsE2Sigma2s(g) * SigmaGrads(g, t, a);
			}
			for ( int r = 0; r < r_len; r++ ){
				for ( int g = 0; g < g_len; g++ ){
					WsE2Sigma2sSigmaGradsRho1sat(g, r) += WsE2Sigma2sSigmaGradsat(g) * Rho1s(g, r);
				}
			}
			for ( int mu = 0; mu < mu_len; mu++ ){
				WsE2Sigma2sSigmaGradsRho1sAO1satmu.setZero();
				for ( int r = 0; r < r_len; r++ ){
					for ( int g = 0; g < g_len; g++ ){
						WsE2Sigma2sSigmaGradsRho1sAO1satmu(g) += WsE2Sigma2sSigmaGradsRho1sat(g, r) * AO1s(g, mu, r);
					}
				}
				for ( int nu = 0; nu < nu_len; nu++ ){
					for ( int g = 0; g < g_len; g++ ){
						F1(mu, nu, t, a) += WsE2Sigma2sSigmaGradsRho1sAO1satmu(g) * AOs(g, nu);
					}
				}
			}
		}
	}
}
