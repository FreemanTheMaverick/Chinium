/*
Generated by EigenEinSum

Recommended filename:
Ws_g...E1Lapls_g...AOs_g,mu...AO2Ls_g,nu---F2_mu,nu.hpp

Einsum expression:
Ws(g), E1Lapls(g), AOs(g, mu), AO2Ls(g, nu) -> F2(mu, nu)

The einsum expression is decomposed into:
Ws(g), E1Lapls(g) -> WsE1Lapls(g)
WsE1Lapls(g), AOs(g, mu) -> WsE1LaplsAOs(g, mu)
WsE1LaplsAOs(g, mu), AO2Ls(g, nu) -> F2(mu, nu)

The index paths are derived to be:
TOP
├── g
└── mu
    ├── g
    └── nu
        └── g
*/
{
	[[maybe_unused]] const int mu_len = AOs.dimension(1);
	assert( mu_len == F2.dimension(0) );
	[[maybe_unused]] const int nu_len = AO2Ls.dimension(1);
	assert( nu_len == F2.dimension(1) );
	[[maybe_unused]] const int g_len = Ws.dimension(0);
	assert( g_len == E1Lapls.dimension(0) );
	assert( g_len == AOs.dimension(0) );
	assert( g_len == AO2Ls.dimension(0) );
	Eigen::Tensor<double, 1> WsE1Lapls(g_len);
	WsE1Lapls.setZero();
	Eigen::Tensor<double, 1> WsE1LaplsAOsmu(g_len);
	for ( int g = 0; g < g_len; g++ ){
		WsE1Lapls(g) += Ws(g) * E1Lapls(g);
	}
	for ( int mu = 0; mu < mu_len; mu++ ){
		WsE1LaplsAOsmu.setZero();
		for ( int g = 0; g < g_len; g++ ){
			WsE1LaplsAOsmu(g) += WsE1Lapls(g) * AOs(g, mu);
		}
		for ( int nu = 0; nu < nu_len; nu++ ){
			for ( int g = 0; g < g_len; g++ ){
				F2(mu, nu) += WsE1LaplsAOsmu(g) * AO2Ls(g, nu);
			}
		}
	}
}
