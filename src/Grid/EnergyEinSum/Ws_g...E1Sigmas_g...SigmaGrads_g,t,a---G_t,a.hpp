/*
Generated by EigenEinSum

Recommended filename:
Ws_g...E1Sigmas_g...SigmaGrads_g,t,a---G_t,a.hpp

Einsum expression:
Ws(g), E1Sigmas(g), SigmaGrads(g, t, a) -> G(t, a)

The einsum expression is decomposed into:
Ws(g), E1Sigmas(g) -> WsE1Sigmas(g)
WsE1Sigmas(g), SigmaGrads(g, t, a) -> G(t, a)

The index paths are derived to be:
TOP
├── g
└── a
    └── t
        └── g
*/
{
	const int t_len = SigmaGrads.dimensions()[1];
	assert( t_len == G.dimensions()[0] );
	const int a_len = SigmaGrads.dimensions()[2];
	assert( a_len == G.dimensions()[1] );
	const int g_len = Ws.dimensions()[0];
	assert( g_len == E1Sigmas.dimensions()[0] );
	assert( g_len == SigmaGrads.dimensions()[0] );
	Eigen::Tensor<double, 1> WsE1Sigmas(g_len);
	WsE1Sigmas.setZero();
	for ( int g = 0; g < g_len; g++ ){
		WsE1Sigmas(g) += Ws(g) * E1Sigmas(g);
	}
	for ( int a = 0; a < a_len; a++ ){
		for ( int t = 0; t < t_len; t++ ){
			for ( int g = 0; g < g_len; g++ ){
				G(t, a) += WsE1Sigmas(g) * SigmaGrads(g, t, a);
			}
		}
	}
}
