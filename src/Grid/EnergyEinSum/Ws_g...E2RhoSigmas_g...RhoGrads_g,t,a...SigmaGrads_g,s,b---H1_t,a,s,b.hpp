/*
Generated by EigenEinSum

Recommended filename:
Ws_g...E2RhoSigmas_g...RhoGrads_g,t,a...SigmaGrads_g,s,b---H1_t,a,s,b.hpp

Einsum expression:
Ws(g), E2RhoSigmas(g), RhoGrads(g, t, a), SigmaGrads(g, s, b) -> H1(t, a, s, b)

The einsum expression is decomposed into:
Ws(g), E2RhoSigmas(g) -> WsE2RhoSigmas(g)
WsE2RhoSigmas(g), RhoGrads(g, t, a) -> WsE2RhoSigmasRhoGrads(g, t, a)
WsE2RhoSigmasRhoGrads(g, t, a), SigmaGrads(g, s, b) -> H1(t, a, s, b)

The index paths are derived to be:
TOP
├── g
└── a
    └── t
        ├── g
        └── b
            └── s
                └── g
*/
{
	const int t_len = RhoGrads.dimensions()[1];
	assert( t_len == H1.dimensions()[0] );
	const int a_len = RhoGrads.dimensions()[2];
	assert( a_len == H1.dimensions()[1] );
	const int s_len = SigmaGrads.dimensions()[1];
	assert( s_len == H1.dimensions()[2] );
	const int b_len = SigmaGrads.dimensions()[2];
	assert( b_len == H1.dimensions()[3] );
	const int g_len = Ws.dimensions()[0];
	assert( g_len == E2RhoSigmas.dimensions()[0] );
	assert( g_len == RhoGrads.dimensions()[0] );
	assert( g_len == SigmaGrads.dimensions()[0] );
	Eigen::Tensor<double, 1> WsE2RhoSigmas(g_len);
	WsE2RhoSigmas.setZero();
	Eigen::Tensor<double, 1> WsE2RhoSigmasRhoGradsat(g_len);
	for ( int g = 0; g < g_len; g++ ){
		WsE2RhoSigmas(g) += Ws(g) * E2RhoSigmas(g);
	}
	for ( int a = 0; a < a_len; a++ ){
		for ( int t = 0; t < t_len; t++ ){
			WsE2RhoSigmasRhoGradsat.setZero();
			for ( int g = 0; g < g_len; g++ ){
				WsE2RhoSigmasRhoGradsat(g) += WsE2RhoSigmas(g) * RhoGrads(g, t, a);
			}
			for ( int b = 0; b < b_len; b++ ){
				for ( int s = 0; s < s_len; s++ ){
					for ( int g = 0; g < g_len; g++ ){
						H1(t, a, s, b) += WsE2RhoSigmasRhoGradsat(g) * SigmaGrads(g, s, b);
					}
				}
			}
		}
	}
}
