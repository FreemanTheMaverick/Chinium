/*
Generated by EigenEinSum

Recommended filename:
Da_mu,nu...AO3sa_g,mu,r,t,s...AOs_g,nu---Rho1Hesssaa_g,r,t,s.hpp

Einsum expression:
Da(mu, nu), AO3sa(g, mu, r|t|s), AOs(g, nu) -> Rho1Hesssaa(g, r, t, s)

The einsum expression is decomposed into:
Da(mu, nu), AO3sa(g, mu, r|t|s) -> DaAO3sa(g, r|t|s, nu)
DaAO3sa(g, r|t|s, nu), AOs(g, nu) -> Rho1Hesssaa(g, r, t, s)

The index paths are derived to be:
TOP
└── nu
    ├── mu
    │   └── s
    │       └── t
    │           └── r
    │               └── g
    └── s
        └── t
            └── r
                └── g
*/
{
	const int g_len = AO3sa.dimension(0);
	assert( g_len == AOs.dimension(0) );
	assert( g_len == Rho1Hesssaa.dimension(0) );
	const int r_len = Rho1Hesssaa.dimension(1);
	const int t_len = Rho1Hesssaa.dimension(2);
	const int s_len = Rho1Hesssaa.dimension(3);
	const int mu_len = Da.dimension(0);
	assert( mu_len == AO3sa.dimension(1) );
	const int nu_len = Da.dimension(1);
	assert( nu_len == AOs.dimension(1) );
	const int r_t_s_len = AO3sa.dimension(2);
	Eigen::Tensor<double, 2> DaAO3sanu(g_len, r_t_s_len);
	for ( int nu = 0; nu < nu_len; nu++ ){
		DaAO3sanu.setZero();
		for ( int mu = 0; mu < mu_len; mu++ ){
			for ( int s = 0; s < s_len; s++ ){
				for ( int t = 0; t < t_len; t++ ){
					for ( int r = 0; r < r_len; r++ ){
						int index_array_r_t_s[] = {r, t, s}; std::sort(index_array_r_t_s, index_array_r_t_s + 3); const int r_t_s = ( index_array_r_t_s[0] + 0 ) / 1 + ( index_array_r_t_s[1] + 0 ) * ( index_array_r_t_s[1] + 1 ) / 2 + ( index_array_r_t_s[2] + 0 ) * ( index_array_r_t_s[2] + 1 ) * ( index_array_r_t_s[2] + 2 ) / 6;
						if ( r > t && t > s ) continue;
						for ( int g = 0; g < g_len; g++ ){
							DaAO3sanu(g, r_t_s) += Da(mu, nu) * AO3sa(g, mu, r_t_s);
						}
					}
				}
			}
		}
		for ( int s = 0; s < s_len; s++ ){
			for ( int t = 0; t < t_len; t++ ){
				for ( int r = 0; r < r_len; r++ ){
					int index_array_r_t_s[] = {r, t, s}; std::sort(index_array_r_t_s, index_array_r_t_s + 3); const int r_t_s = ( index_array_r_t_s[0] + 0 ) / 1 + ( index_array_r_t_s[1] + 0 ) * ( index_array_r_t_s[1] + 1 ) / 2 + ( index_array_r_t_s[2] + 0 ) * ( index_array_r_t_s[2] + 1 ) * ( index_array_r_t_s[2] + 2 ) / 6;
					for ( int g = 0; g < g_len; g++ ){
						Rho1Hesssaa(g, r, t, s) += DaAO3sanu(g, r_t_s) * AOs(g, nu);
					}
				}
			}
		}
	}
}
