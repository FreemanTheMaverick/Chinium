/*
Generated by EigenEinSum

Recommended filename:
Da_mu,nu...AO2sa_g,mu,r,t...AOs_g,nu---Rho1Gradsa_g,r,t.hpp

Einsum expression:
Da(mu, nu), AO2sa(g, mu, r|t), AOs(g, nu) -> Rho1Gradsa(g, r, t)

The einsum expression is decomposed into:
Da(mu, nu), AO2sa(g, mu, r|t) -> DaAO2sa(g, t|r, nu)
DaAO2sa(g, t|r, nu), AOs(g, nu) -> Rho1Gradsa(g, r, t)

The index paths are derived to be:
TOP
└── nu
    └── r
        └── t
            ├── mu
            │   └── g
            └── g
*/
{
	const int g_len = AO2sa.dimensions()[0];
	assert( g_len == AOs.dimensions()[0] );
	assert( g_len == Rho1Gradsa.dimensions()[0] );
	const int r_len = Rho1Gradsa.dimensions()[1];
	const int t_len = Rho1Gradsa.dimensions()[2];
	const int mu_len = Da.dimensions()[0];
	assert( mu_len == AO2sa.dimensions()[1] );
	const int nu_len = Da.dimensions()[1];
	assert( nu_len == AOs.dimensions()[1] );
	Eigen::Tensor<double, 1> DaAO2sanurt(g_len);
	for ( int nu = 0; nu < nu_len; nu++ ){
		for ( int r = 0; r < r_len; r++ ){
			for ( int t = 0; t < t_len; t++ ){
				DaAO2sanurt.setZero();
				int index_array_r_t[] = {r, t}; std::sort(index_array_r_t, index_array_r_t + 2); const int r_t = ( index_array_r_t[0] + 0 ) / 1 + ( index_array_r_t[1] + 0 ) * ( index_array_r_t[1] + 1 ) / 2;
				for ( int mu = 0; mu < mu_len; mu++ ){
					for ( int g = 0; g < g_len; g++ ){
						DaAO2sanurt(g) += Da(mu, nu) * AO2sa(g, mu, r_t);
					}
				}
				for ( int g = 0; g < g_len; g++ ){
					Rho1Gradsa(g, r, t) += DaAO2sanurt(g) * AOs(g, nu);
				}
			}
		}
	}
}
