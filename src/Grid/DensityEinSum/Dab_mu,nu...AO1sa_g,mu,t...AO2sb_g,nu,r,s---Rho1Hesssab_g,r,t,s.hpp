/*
Generated by EigenEinSum

Recommended filename:
Dab_mu,nu...AO1sa_g,mu,t...AO2sb_g,nu,r,s---Rho1Hesssab_g,r,t,s.hpp

Einsum expression:
Dab(mu, nu), AO1sa(g, mu, t), AO2sb(g, nu, r|s) -> Rho1Hesssab(g, r, t, s)

The einsum expression is decomposed into:
Dab(mu, nu), AO1sa(g, mu, t) -> DabAO1sa(g, t, nu)
DabAO1sa(g, t, nu), AO2sb(g, nu, r|s) -> Rho1Hesssab(g, r, t, s)

The index paths are derived to be:
TOP
└── nu
    ├── mu
    │   └── t
    │       └── g
    └── s
        └── t
            └── r
                └── g
*/
{
	const int g_len = AO1sa.dimensions()[0];
	assert( g_len == AO2sb.dimensions()[0] );
	assert( g_len == Rho1Hesssab.dimensions()[0] );
	const int r_len = Rho1Hesssab.dimensions()[1];
	const int t_len = AO1sa.dimensions()[2];
	assert( t_len == Rho1Hesssab.dimensions()[2] );
	const int s_len = Rho1Hesssab.dimensions()[3];
	const int mu_len = Dab.dimensions()[0];
	assert( mu_len == AO1sa.dimensions()[1] );
	const int nu_len = Dab.dimensions()[1];
	assert( nu_len == AO2sb.dimensions()[1] );
	[[maybe_unused]] const int r_s_len = AO2sb.dimensions()[2];
	Eigen::Tensor<double, 2> DabAO1sanu(g_len, t_len);
	for ( int nu = 0; nu < nu_len; nu++ ){
		DabAO1sanu.setZero();
		for ( int mu = 0; mu < mu_len; mu++ ){
			for ( int t = 0; t < t_len; t++ ){
				for ( int g = 0; g < g_len; g++ ){
					DabAO1sanu(g, t) += Dab(mu, nu) * AO1sa(g, mu, t);
				}
			}
		}
		for ( int s = 0; s < s_len; s++ ){
			for ( int t = 0; t < t_len; t++ ){
				for ( int r = 0; r < r_len; r++ ){
					int index_array_r_s[] = {r, s}; std::sort(index_array_r_s, index_array_r_s + 2); const int r_s = ( index_array_r_s[0] + 0 ) / 1 + ( index_array_r_s[1] + 0 ) * ( index_array_r_s[1] + 1 ) / 2;
					for ( int g = 0; g < g_len; g++ ){
						Rho1Hesssab(g, r, t, s) += DabAO1sanu(g, t) * AO2sb(g, nu, r_s);
					}
				}
			}
		}
	}
}
