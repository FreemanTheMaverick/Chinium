/*
Generated by EigenEinSum

Recommended filename:
DU_mu,nu...AO1s_g,mu,r...AOs_g,nu---Rho1Us_g,r.hpp

Einsum expression:
DU(mu, nu), AO1s(g, mu, r), AOs(g, nu) -> Rho1Us(g, r)

The einsum expression is decomposed into:
DU(mu, nu), AO1s(g, mu, r) -> DUAO1s(g, r, nu)
DUAO1s(g, r, nu), AOs(g, nu) -> Rho1Us(g, r)

The index paths are derived to be:
TOP
└── nu
    └── r
        ├── mu
        │   └── g
        └── g
*/
{
	const int g_len = AO1s.dimensions()[0];
	assert( g_len == AOs.dimensions()[0] );
	assert( g_len == Rho1Us.dimensions()[0] );
	const int r_len = AO1s.dimensions()[2];
	assert( r_len == Rho1Us.dimensions()[1] );
	const int mu_len = DU.dimensions()[0];
	assert( mu_len == AO1s.dimensions()[1] );
	const int nu_len = DU.dimensions()[1];
	assert( nu_len == AOs.dimensions()[1] );
	Eigen::Tensor<double, 1> DUAO1snur(g_len);
	for ( int nu = 0; nu < nu_len; nu++ ){
		for ( int r = 0; r < r_len; r++ ){
			DUAO1snur.setZero();
			for ( int mu = 0; mu < mu_len; mu++ ){
				for ( int g = 0; g < g_len; g++ ){
					DUAO1snur(g) += DU(mu, nu) * AO1s(g, mu, r);
				}
			}
			for ( int g = 0; g < g_len; g++ ){
				Rho1Us(g, r) += DUAO1snur(g) * AOs(g, nu);
			}
		}
	}
}
