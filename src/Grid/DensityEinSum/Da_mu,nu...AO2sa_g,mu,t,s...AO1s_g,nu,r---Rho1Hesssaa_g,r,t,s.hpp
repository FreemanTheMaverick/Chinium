/*
Generated by EigenEinSum

Recommended filename:
Da_mu,nu...AO2sa_g,mu,t,s...AO1s_g,nu,r---Rho1Hesssaa_g,r,t,s.hpp

Einsum expression:
Da(mu, nu), AO2sa(g, mu, t|s), AO1s(g, nu, r) -> Rho1Hesssaa(g, r, t, s)

The einsum expression is decomposed into:
Da(mu, nu), AO2sa(g, mu, t|s) -> DaAO2sa(g, t|s, nu)
DaAO2sa(g, t|s, nu), AO1s(g, nu, r) -> Rho1Hesssaa(g, r, t, s)

The index paths are derived to be:
TOP
└── nu
    ├── mu
    │   └── s
    │       └── t
    │           └── g
    └── s
        └── t
            └── r
                └── g
*/
{
	const int g_len = AO2sa.dimension(0);
	assert( g_len == AO1s.dimension(0) );
	assert( g_len == Rho1Hesssaa.dimension(0) );
	const int r_len = AO1s.dimension(2);
	assert( r_len == Rho1Hesssaa.dimension(1) );
	const int t_len = Rho1Hesssaa.dimension(2);
	const int s_len = Rho1Hesssaa.dimension(3);
	const int mu_len = Da.dimension(0);
	assert( mu_len == AO2sa.dimension(1) );
	const int nu_len = Da.dimension(1);
	assert( nu_len == AO1s.dimension(1) );
	const int t_s_len = AO2sa.dimension(2);
	Eigen::Tensor<double, 2> DaAO2sanu(g_len, t_s_len);
	for ( int nu = 0; nu < nu_len; nu++ ){
		DaAO2sanu.setZero();
		for ( int mu = 0; mu < mu_len; mu++ ){
			for ( int s = 0; s < s_len; s++ ){
				for ( int t = 0; t < t_len; t++ ){
					int index_array_t_s[] = {t, s}; std::sort(index_array_t_s, index_array_t_s + 2); const int t_s = ( index_array_t_s[0] + 0 ) / 1 + ( index_array_t_s[1] + 0 ) * ( index_array_t_s[1] + 1 ) / 2;
					if ( t > s ) continue;
					for ( int g = 0; g < g_len; g++ ){
						DaAO2sanu(g, t_s) += Da(mu, nu) * AO2sa(g, mu, t_s);
					}
				}
			}
		}
		for ( int s = 0; s < s_len; s++ ){
			for ( int t = 0; t < t_len; t++ ){
				int index_array_t_s[] = {t, s}; std::sort(index_array_t_s, index_array_t_s + 2); const int t_s = ( index_array_t_s[0] + 0 ) / 1 + ( index_array_t_s[1] + 0 ) * ( index_array_t_s[1] + 1 ) / 2;
				for ( int r = 0; r < r_len; r++ ){
					for ( int g = 0; g < g_len; g++ ){
						Rho1Hesssaa(g, r, t, s) += DaAO2sanu(g, t_s) * AO1s(g, nu, r);
					}
				}
			}
		}
	}
}
