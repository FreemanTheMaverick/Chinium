/*
Generated by EigenEinSum

Recommended filename:
Dab_mu,nu...AO2sa_g,mu,r,t...AO1sb_g,nu,s---Rho1Hesssab_g,r,t,s.hpp

Einsum expression:
Dab(mu, nu), AO2sa(g, mu, r|t), AO1sb(g, nu, s) -> Rho1Hesssab(g, r, t, s)

The einsum expression is decomposed into:
Dab(mu, nu), AO2sa(g, mu, r|t) -> DabAO2sa(g, r|t, nu)
DabAO2sa(g, r|t, nu), AO1sb(g, nu, s) -> Rho1Hesssab(g, r, t, s)

The index paths are derived to be:
TOP
└── nu
    ├── mu
    │   └── t
    │       └── r
    │           └── g
    └── s
        └── t
            └── r
                └── g
*/
{
	const int g_len = AO2sa.dimension(0);
	assert( g_len == AO1sb.dimension(0) );
	assert( g_len == Rho1Hesssab.dimension(0) );
	const int r_len = Rho1Hesssab.dimension(1);
	const int t_len = Rho1Hesssab.dimension(2);
	const int s_len = AO1sb.dimension(2);
	assert( s_len == Rho1Hesssab.dimension(3) );
	const int mu_len = Dab.dimension(0);
	assert( mu_len == AO2sa.dimension(1) );
	const int nu_len = Dab.dimension(1);
	assert( nu_len == AO1sb.dimension(1) );
	const int r_t_len = AO2sa.dimension(2);
	Eigen::Tensor<double, 2> DabAO2sanu(g_len, r_t_len);
	for ( int nu = 0; nu < nu_len; nu++ ){
		DabAO2sanu.setZero();
		for ( int mu = 0; mu < mu_len; mu++ ){
			for ( int t = 0; t < t_len; t++ ){
				for ( int r = 0; r < r_len; r++ ){
					int index_array_r_t[] = {r, t}; std::sort(index_array_r_t, index_array_r_t + 2); const int r_t = ( index_array_r_t[0] + 0 ) / 1 + ( index_array_r_t[1] + 0 ) * ( index_array_r_t[1] + 1 ) / 2;
					if ( r > t ) continue;
					for ( int g = 0; g < g_len; g++ ){
						DabAO2sanu(g, r_t) += Dab(mu, nu) * AO2sa(g, mu, r_t);
					}
				}
			}
		}
		for ( int s = 0; s < s_len; s++ ){
			for ( int t = 0; t < t_len; t++ ){
				for ( int r = 0; r < r_len; r++ ){
					int index_array_r_t[] = {r, t}; std::sort(index_array_r_t, index_array_r_t + 2); const int r_t = ( index_array_r_t[0] + 0 ) / 1 + ( index_array_r_t[1] + 0 ) * ( index_array_r_t[1] + 1 ) / 2;
					for ( int g = 0; g < g_len; g++ ){
						Rho1Hesssab(g, r, t, s) += DabAO2sanu(g, r_t) * AO1sb(g, nu, s);
					}
				}
			}
		}
	}
}
