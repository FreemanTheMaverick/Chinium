/*
Generated by EigenEinSum

Recommended filename:
Da_mu,nu...AO1sa_g,mu,t...AOs_g,nu---RhoGradsa_g,t.hpp

Einsum expression:
Da(mu, nu), AO1sa(g, mu, t), AOs(g, nu) -> RhoGradsa(g, t)

The einsum expression is decomposed into:
Da(mu, nu), AO1sa(g, mu, t) -> DaAO1sa(g, t, nu)
DaAO1sa(g, t, nu), AOs(g, nu) -> RhoGradsa(g, t)

The index paths are derived to be:
TOP
└── nu
    └── t
        ├── mu
        │   └── g
        └── g
*/
{
	[[maybe_unused]] const int g_len = AO1sa.dimension(0);
	assert( g_len == AOs.dimension(0) );
	assert( g_len == RhoGradsa.dimension(0) );
	[[maybe_unused]] const int t_len = AO1sa.dimension(2);
	assert( t_len == RhoGradsa.dimension(1) );
	[[maybe_unused]] const int mu_len = Da.dimension(0);
	assert( mu_len == AO1sa.dimension(1) );
	[[maybe_unused]] const int nu_len = Da.dimension(1);
	assert( nu_len == AOs.dimension(1) );
	Eigen::Tensor<double, 1> DaAO1sanut(g_len);
	for ( int nu = 0; nu < nu_len; nu++ ){
		for ( int t = 0; t < t_len; t++ ){
			DaAO1sanut.setZero();
			for ( int mu = 0; mu < mu_len; mu++ ){
				for ( int g = 0; g < g_len; g++ ){
					DaAO1sanut(g) += Da(mu, nu) * AO1sa(g, mu, t);
				}
			}
			for ( int g = 0; g < g_len; g++ ){
				RhoGradsa(g, t) += DaAO1sanut(g) * AOs(g, nu);
			}
		}
	}
}
