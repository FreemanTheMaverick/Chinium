/*
Generated by EigenEinSum

Recommended filename:
Rho1Hesss_g,r,t,a,s,b...Rho1s_g,r---SigmaHesss_g,t,a,s,b.hpp

Einsum expression:
Rho1Hesss(g, r, t, a, s, b), Rho1s(g, r) -> SigmaHesss(g, t, a, s, b)

The einsum expression is decomposed into:
Rho1Hesss(g, r, t, a, s, b), Rho1s(g, r) -> SigmaHesss(g, t, a, s, b)

The index paths are derived to be:
TOP
└── b
    └── s
        └── a
            └── t
                └── r
                    └── g
*/
{
	const int g_len = Rho1Hesss.dimensions()[0];
	assert( g_len == Rho1s.dimensions()[0] );
	assert( g_len == SigmaHesss.dimensions()[0] );
	const int t_len = Rho1Hesss.dimensions()[2];
	assert( t_len == SigmaHesss.dimensions()[1] );
	const int a_len = Rho1Hesss.dimensions()[3];
	assert( a_len == SigmaHesss.dimensions()[2] );
	const int s_len = Rho1Hesss.dimensions()[4];
	assert( s_len == SigmaHesss.dimensions()[3] );
	const int b_len = Rho1Hesss.dimensions()[5];
	assert( b_len == SigmaHesss.dimensions()[4] );
	const int r_len = Rho1Hesss.dimensions()[1];
	assert( r_len == Rho1s.dimensions()[1] );
	for ( int b = 0; b < b_len; b++ ){
		for ( int s = 0; s < s_len; s++ ){
			for ( int a = 0; a < a_len; a++ ){
				for ( int t = 0; t < t_len; t++ ){
					for ( int r = 0; r < r_len; r++ ){
						for ( int g = 0; g < g_len; g++ ){
							SigmaHesss(g, t, a, s, b) += Rho1Hesss(g, r, t, a, s, b) * Rho1s(g, r);
						}
					}
				}
			}
		}
	}
}
