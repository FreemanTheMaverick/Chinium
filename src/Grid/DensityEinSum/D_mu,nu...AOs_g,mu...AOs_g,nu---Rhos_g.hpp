/*
Generated by EigenEinSum

Recommended filename:
D_mu,nu...AOs_g,mu...AOs_g,nu---Rhos_g.hpp

Einsum expression:
D(mu, nu), AOs(g, mu), AOs(g, nu) -> Rhos(g)

The einsum expression is decomposed into:
D(mu, nu), AOs(g, mu) -> DAOs(g, nu)
DAOs(g, nu), AOs(g, nu) -> Rhos(g)

The index paths are derived to be:
TOP
└── nu
    ├── mu
    │   └── g
    └── g
*/
{
	const int g_len = AOs.dimensions()[0];
	assert( g_len == AOs.dimensions()[0] );
	assert( g_len == Rhos.dimensions()[0] );
	const int mu_len = D.dimensions()[0];
	assert( mu_len == AOs.dimensions()[1] );
	const int nu_len = D.dimensions()[1];
	assert( nu_len == AOs.dimensions()[1] );
	Eigen::Tensor<double, 1> DAOsnu(g_len);
	for ( int nu = 0; nu < nu_len; nu++ ){
		DAOsnu.setZero();
		for ( int mu = 0; mu < mu_len; mu++ ){
			for ( int g = 0; g < g_len; g++ ){
				DAOsnu(g) += D(mu, nu) * AOs(g, mu);
			}
		}
		for ( int g = 0; g < g_len; g++ ){
			Rhos(g) += DAOsnu(g) * AOs(g, nu);
		}
	}
}
